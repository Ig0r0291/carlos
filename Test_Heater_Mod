import tclab
import numpy as np
import time
import matplotlib.pyplot as plt

# Conecta ao Arduino
a = tclab.TCLab()

# Função para salvar os dados em um arquivo txt
def save_txt(t, u1, u2, y1, y2, sp1, sp2):
    data = np.vstack((t, u1, u2, y1, y2, sp1, sp2))
    data = data.T
    top = ('Time (sec), Heater 1 (%), Heater 2 (%), '
           'Temperature 1 (degC), Temperature 2 (degC), '
           'Set Point 1 (degC), Set Point 2 (degC)')
    np.savetxt('data.txt', data, delimiter=',', header=top, comments='')

# Exibe a versão do TCLab
print(a.version)

# Liga o LED
print('LED On')
a.LED(100)

# Tempo de execução em minutos
run_time = 10.0

# Número de ciclos
loops = int(60.0 * run_time)
tm = np.zeros(loops)

# Temperatura (Celsius)
Tsp1 = np.ones(loops) * 23.0 # pontos de ajuste de temperatura do sensor
T1 = np.ones(loops) * a.T1
Tsp2 = np.ones(loops) * 23.0 # pontos de ajuste de temperatura do sensor
T2 = np.ones(loops) * a.T2

# Teste de degrau (0 - 100%)
Q1 = np.ones(loops) * 0.0 #potências aplicadas aos aquecedore 1
Q2 = np.ones(loops) * 0.0 #potências aplicadas aos aquecedore 2
Q1[10:] = 80.0 # Q1 ajustado para 80% a partir do ciclo 10.

print('Running Main Loop. Ctrl-C to end.')
print('  Time   Q1     Q2    T1     T2')
print('{:6.1f} {:6.2f} {:6.2f} {:6.2f} {:6.2f}'.format(tm[0], Q1[0], Q2[0], T1[0], T2[0]))

# Cria o gráfico
plt.figure(figsize=(10,7))
plt.ion()
plt.show()

# Loop principal
start_time = time.time()
prev_time = start_time
try:
    for i in range(1, loops):
        # Tempo de espera
        sleep_max = 1.0
        sleep = sleep_max - (time.time() - prev_time)
        if sleep >= 0.01:
            time.sleep(sleep)
        else:
            time.sleep(0.01)

        # Registro do tempo
        t = time.time()
        dt = t - prev_time
        prev_time = t
        tm[i] = t - start_time

        # Leitura das temperaturas
        T1[i] = a.T1
        T2[i] = a.T2

        ###############################
        ### CONTROLLER or ESTIMATOR ###
        ###############################

        # Controle dos aquecedores
        a.Q1(Q1[i])
        a.Q2(Q2[i])

        # Impressão dos dados
        print('{:6.1f} {:6.2f} {:6.2f} {:6.2f} {:6.2f}'.format(tm[i], Q1[i], Q2[i], T1[i], T2[i]))

        # Plota os gráficos
        plt.clf()
        ax = plt.subplot(2, 1, 1)
        ax.grid()
        plt.plot(tm[0:i], T1[0:i], 'ro', label=r'$T_1$')
        plt.plot(tm[0:i], T2[0:i], 'bx', label=r'$T_2$')
        plt.ylabel('Temperature (degC)')
        plt.legend(loc='best')
        ax = plt.subplot(2, 1, 2)
        ax.grid()
        plt.plot(tm[0:i], Q1[0:i], 'r-', label=r'$Q_1$')
        plt.plot(tm[0:i], Q2[0:i], 'b:', label=r'$Q_2$')
        plt.ylabel('Heaters')
        plt.xlabel('Time (sec)')
        plt.legend(loc='best')
        plt.draw()
        plt.pause(0.05)

    # Desliga os aquecedores
    a.Q1(0)
    a.Q2(0)
    # Salva os dados em txt
    save_txt(tm[0:i], Q1[0:i], Q2[0:i], T1[0:i], T2[0:i], Tsp1[0:i], Tsp2[0:i])
    # Salva a figura
    plt.savefig('test_Heaters.png')

except KeyboardInterrupt:
    # Desconecta do Arduino
    a.Q1(0)
    a.Q2(0)
    print('Shutting down')
    a.close()
    save_txt(tm[0:i], Q1[0:i], Q2[0:i], T1[0:i], T2[0:i], Tsp1[0:i], Tsp2[0:i])
    plt.savefig('test_Heaters.png')

except:
    # Desconecta do Arduino
    a.Q1(0)
    a.Q2(0)
    print('Error: Shutting down')
    a.close()
    save_txt(tm[0:i], Q1[0:i], Q2[0:i], T1[0:i], T2[0:i], Tsp1[0:i], Tsp2[0:i])
    plt.savefig('test_Heaters.png')
    raise
